"""
Django settings for Crawling project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
import environ
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env(
    DEBUG=(bool, False)
)

# .env 파일 경로 설정 및 로드
env_file = os.path.join(BASE_DIR, '.env')
if os.path.exists(env_file):
    environ.Env.read_env(env_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-wbljksz6!1k_3xxe!&c#*@f@x69@%686f#o(qb=re$)hc$1y)x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crawled_data.apps.CrawledDataConfig',
    'django_apscheduler',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Crawling.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Crawling.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'DEBUG',  # crawled_data 로거의 로그를 출력하기 위해 DEBUG로 유지
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'ERROR',  # 루트 로거의 레벨을 ERROR로 설정
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'ERROR',  # django 로거의 레벨을 ERROR로 설정
            'propagate': False,
        },
        'crawled_data': {
            'handlers': ['console'],
            'level': 'DEBUG',  # 당신의 로거는 DEBUG 레벨로 유지
            'propagate': False,
        },
    },
}
# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# default
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"

# 자동으로 스케쥴러 실행
SCHEDULER_DEFAULT = True


GEN_AI_SECRET_KEY = env('GEN_AI_SECRET_KEY')
CRAWLING_USER_AGENT = env('CRAWLING_USER_AGENT')
OPEN_AI_API_KEY = env('OPEN_AI_API_KEY')


REDIS_HOST = env('REDIS_HOST')
REDIS_USERNAME = env('REDIS_USERNAME')
REDIS_PASSWORD = env('REDIS_PASSWORD')

MONGO_HOST = env('MONGO_HOST')
MONGO_PORT = 27017
MONGO_USERNAME = env('MONGO_USERNAME')
MONGO_PASSWORD = env('MONGO_PASSWORD')
MONGO_DB_NAME = 'newlearn'
MONGO_COLLECTION_NAME = 'news'

S3_REGION = env('S3_REGION')
S3_ACCESS_KEY = env('S3_ACCESS_KEY')
S3_SECRET_KEY = env('S3_SECRET_KEY')

MYSQL_HOST = env('MYSQL_HOST')
MYSQL_USER = env('MYSQL_USER')
MYSQL_PWD = env('MYSQL_PWD')
MYSQL_DB_NAME = env('MYSQL_DB_NAME')
MYSQL_PORT = 3306